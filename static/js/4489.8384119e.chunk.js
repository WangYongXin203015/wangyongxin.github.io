"use strict";(self.webpackChunkvue=self.webpackChunkvue||[]).push([[4489],{94489:function(n,r,e){e.r(r),e.d(r,{default:function(){return o}});var i=e(66252),t=e(3577),c=(0,i._)("h4",null,"创建项目",-1),l=[(0,i.Uk)(""),(0,i._)("code",null,'\r\n    cargo new diy_cli\r\n    //使用clap 框架\r\n    //cargo.toml [dependencies] 中添加\r\n    clap = { version = "3.2.8", features = ["derive","cargo"] }\r\n    main.rs 添加\r\n\r\n    use clap::{ArgEnum, Parser};\r\n\r\n    #[derive(Parser)]//利用宏实现trait\r\n    struct Cli {\r\n        #[clap(arg_enum)]\r\n        active: Active,\r\n    }\r\n    #[derive(Copy, Clone, ArgEnum)] //利用宏实现trait \r\n    enum Active { //定义两个行为  clap读取枚举参数 \r\n        Active1,\r\n        Active2,\r\n    }\r\n    fn main() {\r\n        let cli = Cli::parse();\r\n        match cli.active {\r\n            Active::Active1 => println!("Active1"),\r\n            Active::Active2 => println!("Active2")\r\n        }\r\n    }\r\n    cargo run 运行\r\n    cd ./target/debug \r\n    diy_cli active1  查看效果\r\n',-1),(0,i.Uk)("\r\n")],a=(0,i._)("h4",null,"读取命令行Option字符串参数",-1),u=[(0,i.Uk)(""),(0,i._)("code",null,"\r\n    struct Cli 添加\r\n   "+(0,t.zw)(" name: Option<String>,")+'\r\n    第一个匹配项更改\r\n    Active::Active1 => match cli.name {\r\n        Some(name)=>{println!("{}",name)},\r\n        None=>{println!("请输入项目名称")}\r\n    }\r\n    \r\n    //现在可以随便书写命令和对应的行为\r\n',-1),(0,i.Uk)("\r\n")];const v={};var o=(0,e(83744).Z)(v,[["render",function(n,r){var e=(0,i.Q2)("code");return(0,i.wg)(),(0,i.iD)("section",null,[c,(0,i.wy)(((0,i.wg)(),(0,i.iD)("pre",null,l)),[[e]]),a,(0,i.wy)(((0,i.wg)(),(0,i.iD)("pre",null,u)),[[e]])])}]])}}]);