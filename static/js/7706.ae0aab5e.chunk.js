"use strict";(self.webpackChunkvue=self.webpackChunkvue||[]).push([[7706],{17706:function(l,i,u){u.r(i),u.d(i,{default:function(){return r}});var P=u(66252),n=[(0,P.uE)("<h4> 计算机网络的分类</h4><ul><li>按照网络的作用范围：广域网（WAN）、城域网（MAN）、局域网（LAN）；</li><li>按照网络使用者：公用网络、专用网络。</li></ul><h4>计算机网络的层次结构</h4><ul><li>OSI七层协议 <ul><li>物理层 <ul><li>解决两个硬件之间怎么通信的问题，定义物理设备标准。</li><li>它的主要作用是传输比特流</li><li>数模转换 数字信号转换为模拟信号 </li><li>模数转换 模拟信号转换为数字信号 </li><li>这一层的数据叫做比特。</li></ul></li><li>数据链路层 <ul><li>在计算机网络中由于各种干扰的存在，物理链路是不可靠的。</li><li>通过各种控制协议，将有差错的物理信道变为无差错的、能可靠传输数据帧的数据链路。</li><li>接收来自物理层的位流形式的数据，并封装成帧，传输到上一层</li><li>接收来自上层的数据帧，拆装为位流形式的数据转发到物理层</li><li>这一层的数据叫帧</li></ul></li><li>网络层 <ul><li>计算机寻址，路径选择</li><li>通过路由选择算法，为报文（该层的数据单位，由上一层数据打包而来）通过通信子网选择最适当的路径</li><li>这一层定义的是IP地址，通过IP地址寻址，所以产生了IP协议</li></ul></li><li>传输层 <ul><li>当发送大量数据时，很可能会出现丢包的情况，另一台电脑要告诉是否完整接收到全部的包。如果缺了，就告诉丢了哪些包，然后再发一次，直至全部接收为止。</li><li>监控数据传输服务的质量，保证报文的正确传输</li></ul></li><li>会话层 <ul><li>自动收发包，自动寻址的功能</li><li>它的作用就是建立和管理应用程序之间的通信。 </li></ul></li><li>表示层 <ul><li>表示层负责数据格式的转换</li><li>将应用处理的信息转换为适合网络传输的格式</li><li>将来自下一层的数据转换为上层能处理的格式</li></ul></li><li>应用层 <ul><li>应用层是计算机用户，以及各种应用程序和网络之间的接口，其功能是直接向用户提供服务，完成用户希望在网络上完成的各种工作。</li></ul></li></ul></li><li>TCP/IP4四层协议 <ul><li>网络访问层 <ul><li>网络访问层主要是管理物理网络准备所需要的数据</li><li>与计算机网络适配器连接</li><li>根据合适的方式调整数据传输</li><li>把数据转化为电子流或脉冲的形式在传输介质上传输</li><li>对发送的数据添加错误检查信息、对接收的数据进行数据检验</li></ul></li><li>网际层 <ul><li>MAC地址 网络适配器地址厂商生产时候就规定了一个复杂的英文串组成唯一坐标地址</li><li>IP地址 IP是一套有规则的数字组合，通过IP地址可以快速定位到我们的目标计算机区域，</li><li>和MAC 组合就能快速找到网络中具体的一台计算机了</li><li>域名 IP地址的别名 用户更容易记忆 DNS服务 域名解析服务通过DNS 查找IP地址</li></ul></li><li>传输层 <ul><li>提供应用程序接口，为网络应用程序提供网络访问的途径</li><li>提供可以从多个应用层序接收消息的功能（多路复用），同时也提供可以把消息分发给应用程序的功能（多路分解）。</li><li>对数据进行错误检测、流量控制。</li></ul></li><li>应用层 <ul><li>应用层：为用户的应用提供服务并支持网络访问。</li><li>会话层：负责管理网络中计算之间的通信，提供传输层不具备的连接相关功能。</li><li>表示层：负责转化数据格式，并处理数据加密和数据压缩</li></ul></li></ul></li></ul><h4>TCP和UDP</h4><ul><li>TCP <ul><li>TCP是一个面向连接的协议主要包括以下几个特性 稳定，慢，数据准确</li><li>TCP面向连接，需要进行三次握手建立连接，四次挥手断开连接。</li><li>面向流的处理，可以一个个字节的方式接收数据，然后把这些数据组成数据段，发给网际层。</li><li>对数据发送进行流量控制（滑动窗口协议），避免发送和接收方因为缓存写满而造成的数据丢失问题。</li><li>对数据进行校验、分段的数据有重新排序功能，对错误和丢失的数据有重发机制。</li></ul></li><li>UDP <ul><li>UDP不面向连接。快，数据要求低，</li><li>只有有限的错误检验机制</li><li>不进行流量控制</li></ul></li></ul>",6)];const e={};var r=(0,u(83744).Z)(e,[["render",function(l,i){return(0,P.wg)(),(0,P.iD)("section",null,n)}]])}}]);