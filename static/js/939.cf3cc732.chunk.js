"use strict";(self.webpackChunkvue=self.webpackChunkvue||[]).push([[939],{939:function(n,e,r){r.r(e),r.d(e,{default:function(){return l}});var t=r(66252),a=(0,t._)("h4",null,"渲染过程",-1),o=[(0,t.Uk)(""),(0,t._)("code",null,"\r\n    //渲染\r\n    //React$Element 根节点\r\n    //container 获取的盒子\r\n    //callback 回调函数\r\n    function render(element: React$Element,container: Container,callback: ?Function){\r\n        retrun legacyRenderSubtreeIntoContainer(null,element,container,false,callback)\r\n\r\n    }\r\n    //\r\n    legacyRenderSubtreeIntoContainer(null,element,container,false,callback){\r\n        const maybeRoot = container._reactRootContainer;\r\n        let root: FiberRoot;  //根节点\r\n        if (!maybeRoot) { //没有根节点创建根节点\r\n            root = legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate);\r\n        } else {\r\n            root = maybeRoot;\r\n            if (typeof callback === 'function') {\r\n                const originalCallback = callback;\r\n                callback = function() {\r\n                    const instance = getPublicRootInstance(root); //\r\n                    originalCallback.call(instance); //\r\n                };\r\n            }\r\n            updateContainer(children, root, parentComponent, callback); //更新dom\r\n        }\r\n    }\r\n    //创建根节点\r\n    legacyCreateRootFromDOMContainer(container, children, parentComponent, callback, forceHydrate){\r\n\r\n    }\r\n    //获取实例\r\n    getPublicRootInstance(){}\r\n    //更新页面\r\n    updateContainer\r\n\r\n\r\n",-1),(0,t.Uk)("\r\n")];const c={};var l=(0,r(83744).Z)(c,[["render",function(n,e){var r=(0,t.Q2)("code");return(0,t.wg)(),(0,t.iD)("section",null,[a,(0,t.wy)(((0,t.wg)(),(0,t.iD)("pre",null,o)),[[r]])])}]])}}]);