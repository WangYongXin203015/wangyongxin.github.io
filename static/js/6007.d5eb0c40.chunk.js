"use strict";(self.webpackChunkvue=self.webpackChunkvue||[]).push([[6007],{16007:function(i,r,l){l.r(r),l.d(r,{default:function(){return e}});var t=l(66252),n=[(0,t.uE)("<h4>String,&amp;str</h4><ul><li>String 字符串对象</li><li>&amp;str 字符串字面量 本质 字符串切片 str的部分长度的引用 </li><li>mian函数中的 &amp;str 是静态的</li></ul><h4>String</h4><ul><li>String::from(&amp;str)</li><li>String::new()</li><li>string.push(char)</li><li>string.push_str(&amp;str)</li><li>string.as_bytes() 将string 转换为u8数组</li><li>string.truncate(len) 截取前面几个字符</li><li>string.pop() 取出最后一个字符并返回Option</li><li>string.remove(index) 取出第index个char 原str会改变</li><li>string.remove_matches(pat: P ) 取出匹配的字符串</li><li>string.retain(f:F) 根据传递的回调函数剔除掉符合条件的字符 回调是闭包</li><li>string.insert(index,char) 在序号处插入char</li><li>string.insert_str(index,&amp;str) 在序号处插入&amp;str</li><li>string.as_mut_vec(index,&amp;str) 转化为&amp;Vec u8</li><li>string.len() </li><li>string.is_empty()</li><li>string.split_off(index) 原String [0,index) 返回值[inde,len)</li><li>string.clear() 清空</li><li>string.drain(range) 原String中去除range 返回Drain类型的迭代器</li><li>string.replace_range(rang,&amp;str) 移除原String范围内的字符串并替换</li><li>string.split(&#39;char&#39; | &amp;str | slice of chars) split().collect() 可以传入字符串切片 也可以传入闭包回调</li></ul><h4>&amp;str</h4><ul><li></li></ul>",6)];const s={};var e=(0,l(83744).Z)(s,[["render",function(i,r){return(0,t.wg)(),(0,t.iD)("section",null,n)}]])}}]);