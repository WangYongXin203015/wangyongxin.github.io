"use strict";(self.webpackChunkvue=self.webpackChunkvue||[]).push([[1406],{41406:function(l,i,u){u.r(i),u.d(i,{default:function(){return n}});var e=u(66252),t=[(0,e.uE)("<h4>数据结构（Data Structure）是计算机中存储、组织数据的方式</h4><ul><li>数据结构 在解决问题 中主要用来</li><li>存放要处理的数据</li><li>实现算法策略</li><li> DataStructure = (D, L, S, O)</li><li>D data数据元素</li><li>L logic数据元素之间的逻辑</li><li>S save逻辑关系在计算机中的存储结构</li><li>O 规范操作</li></ul><h4>逻辑结构 逻辑结构是指数据元素之间客观存在的关系，主要用于人们理解和交流以及指导算法的设计</h4><ul><li>线性结构：数据元素之间存在一对一的关系</li><li>树形结构：数据元素之间存在一对多的关系</li><li>图形结构：数据元素之间存在多对多的关系</li><li>集合结构：数据元素属于同一个集合</li></ul><h4>存储结构 存储结构用于指导算法编程实现</h4><ul><li>顺序存储 逻辑上相邻的元素存储在物理位置相邻的存储单元中 数据 数据</li><li>链式存储 在数据元素中添加一些地址域或辅助结构，用于存放数据元素之间的关系 前指针 数据 后指针</li><li>顺序存储 存取快 但是插入，删除效率低下</li><li>链式顺序 查找,遍历慢 插入，删除效率高</li><li>存储结构 可以单独使用也可以结合使用</li></ul><h4>常用数据结构</h4><ul><li>数组 Array 顺序存储</li><li>容器 Vector 动态扩容</li><li>栈 Stack 先进后出 函数作用域 </li><li>队列 Queue先进先出</li><li>链表 Linked List </li><li>树 Tree</li></ul>",8)];const r={};var n=(0,u(83744).Z)(r,[["render",function(l,i){return(0,e.wg)(),(0,e.iD)("section",null,t)}]])}}]);