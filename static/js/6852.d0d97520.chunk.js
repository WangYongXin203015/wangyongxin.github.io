"use strict";(self.webpackChunkvue=self.webpackChunkvue||[]).push([[6852],{96852:function(n,r,e){e.r(r),e.d(r,{default:function(){return w}});var a=e(66252),s=e(3577),t=(e(99938),(0,a._)("h4",null,"Webassembly",-1)),l=(0,a._)("ul",null,[(0,a._)("li",null,"将其他语言编译成特殊的二进制文件，可以在浏览器环境使用js调用"),(0,a._)("li",null,"wasm 可能成为一种新的标准，只要宿主环境支持wasm，即可运行")],-1),u=(0,a._)("h4",null,"准备工作(使用rust作为编译成wasm的语言)",-1),i=(0,a.Uk)(""),m=(0,a.Uk)("\r\n");var w=(0,a.aZ)({__name:"WASMStart",setup:function(n){return function(n,r){var e=(0,a.Q2)("code");return(0,a.wg)(),(0,a.iD)("section",null,[t,l,u,(0,a.wy)(((0,a.wg)(),(0,a.iD)("pre",null,[i,(0,a._)("code",null,'\r\n    //安装wasm-pack 将rust 代码编译成wasm\r\n    cargo install wasm-pack\r\n    //新建文件\r\n    cargo new hello-wasm\r\n    //使用wasm-bindgen包\r\n    //cargo.toml 添加\r\n    [lib]\r\n    crate-type = ["cdylib"]\r\n    [dependencies]\r\n    wasm-bindgen = "0.2"\r\n    //src下新建lib.rs 添加\r\n    extern crate wasm_bindgen;\r\n\r\n    use wasm_bindgen::prelude::*;\r\n\r\n    #[wasm_bindgen]\r\n    //extern 块表示rust调用外部的api 由js提供\r\n    extern {  \r\n        pub fn alert(s: &str);\r\n    }\r\n\r\n    #[wasm_bindgen] //创建js可使用的代码\r\n    //将rust内的函数暴露出去\r\n    pub fn greet(name: &str) { \r\n        alert(&format!("Hello, {}!", name));\r\n    }\r\n    //编译 编译文件到pkg目录\r\n    wasm-pack build --target web \r\n    //pak 新建index.html 添加\r\n    '+(0,s.zw)('<script type="module">\n        import init, {greet,add} from "./wasm.js";\n        await init()\n        greet("wasm")  \n        //打开网页查看效果\n    <\/script>')+"\r\n    //wasm 在调用webapi上性能并没有优势\r\n    //只有在计算任务上有一些优势\r\n",1),m])),[[e]])])}}})}}]);