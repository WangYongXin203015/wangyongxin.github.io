"use strict";(self.webpackChunkvue=self.webpackChunkvue||[]).push([[6167],{6167:function(l,i,e){e.r(i),e.d(i,{default:function(){return u}});var n=e(6252),o=[(0,n.uE)("<h4>iframe引用</h4><ul><li>判断location.href 是否是 top.location.href 不是强制跳转 </li><li>sandbox 属性 <ul><li>allow-same-origin：允许被视为同源，即可操作父级DOM或cookie等</li><li>allow-top-navigation：允许当前iframe的引用网页通过url跳转链接或加载</li><li>allow-forms：允许表单提交</li><li>allow-scripts：允许执行脚本文件</li><li>allow-popups：允许浏览器打开新窗口进行跳转</li><li>“”：设置为空时上面所有允许全部禁止</li></ul></li></ul><h4>opener</h4><ul><li>a标签 和 window.open跳转</li><li>window.opener可以访问跳转过来的window对象</li><li>a标签通过rel属性进行控制 </li><li> var newTab = window.open();newTab.opener = null;newTab.location = url; 修改跳转前的windows对象</li></ul><h4>CSRF / XSRF（跨站请求伪造）</h4><ul><li>攻击者盗用了用户的身份，以用户的名义进行恶意请求。</li><li>涉及到数据修改操作严格使用 post 请求而不是 get 请求</li><li>HTTP 协议中使用 Referer 属性来确定请求来源进行过滤（禁止外域）</li><li>请求地址添加 token ，使黑客无法伪造用户请求</li><li>HTTP 头自定义属性验证（类似上一条）</li><li>显示验证方式：添加验证码、密码等</li></ul><h4>XSS/CSS（跨站脚本攻击）</h4><ul><li>浏览器会自动解析js代码并执行</li><li>持久型XSS：将脚本植入到服务器上，从而导致每个访问的用户都会执行</li><li>非持久型XSS：对个体用户某url的参数进行攻击</li><li>现代大部分浏览器都自带 XSS 筛选器，vue / react 等成熟框架也对 XSS 进行一些防护</li><li>合理使用get/post等请求方式</li><li>对于URL携带参数谨慎使用</li></ul><h4>ClickJacking（点击劫持）</h4><ul><li>一般会利用透明 iframe 覆盖原网页诱导用户进行某些操作达成目的。</li><li>在HTTP投中加入 X-FRAME-OPTIONS 属性，此属性控制页面是否可被嵌入 iframe 中【DENY：不能被所有网站嵌套或加载；SAMEORIGIN：只能被同域网站嵌套或加载；ALLOW-FROM URL：可以被指定网站嵌套或加载。】</li><li>判断当前网页是否被 iframe 嵌套（详情在第一条 firame 中）</li></ul><h4>CDN劫持</h4><ul><li>script 和 link 标签有了新的属性 integrity</li></ul>",12)];const r={};var u=(0,e(3744).Z)(r,[["render",function(l,i){return(0,n.wg)(),(0,n.iD)("section",null,o)}]])}}]);