"use strict";(self.webpackChunkvue=self.webpackChunkvue||[]).push([[288],{8288:function(l,i,e){e.r(i),e.d(i,{default:function(){return t}});var u=e(6252),r=[(0,u.uE)("<h4>iframe引用</h4><ul><li> 判断location.href 是否是 top.location.href 不是强制跳转 </li></ul><h4>CSRF / XSRF（跨站请求伪造）</h4><ul><li></li><li>涉及到数据修改操作严格使用 post 请求而不是 get 请求</li><li>HTTP 协议中使用 Referer 属性来确定请求来源进行过滤（禁止外域）</li><li>请求地址添加 token ，使黑客无法伪造用户请求</li><li>HTTP 头自定义属性验证（类似上一条）</li><li>显示验证方式：添加验证码、密码等</li></ul><h4>XSS/CSS（跨站脚本攻击）</h4><ul><li>浏览器会自动解析js代码并执行</li><li>持久型XSS：将脚本植入到服务器上，从而导致每个访问的用户都会执行</li><li>非持久型XSS：对个体用户某url的参数进行攻击</li><li>现代大部分浏览器都自带 XSS 筛选器，vue / react 等成熟框架也对 XSS 进行一些防护</li><li></li></ul><h4>ClickJacking（点击劫持）</h4><ul><li>一般会利用透明 iframe 覆盖原网页诱导用户进行某些操作达成目的。</li><li>在HTTP投中加入 X-FRAME-OPTIONS 属性，此属性控制页面是否可被嵌入 iframe 中【DENY：不能被所有网站嵌套或加载；SAMEORIGIN：只能被同域网站嵌套或加载；ALLOW-FROM URL：可以被指定网站嵌套或加载。】</li><li>判断当前网页是否被 iframe 嵌套（详情在第一条 firame 中）</li></ul>",8)];const n={};var t=(0,e(3744).Z)(n,[["render",function(l,i){return(0,u.wg)(),(0,u.iD)("section",null,r)}]])}}]);