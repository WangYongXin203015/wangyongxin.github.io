(self.webpackChunkvue=self.webpackChunkvue||[]).push([[4120],{53592:function(r,n,e){r.exports=e(27385)},78363:function(r,n,e){r.exports=e(81522)},19996:function(r,n,e){r.exports=e(32209)},95299:function(r,n,e){var t=e(27698);r.exports=t},83450:function(r,n,e){var t=e(83363);r.exports=t},66820:function(r,n,e){var t=e(56243);r.exports=t},54493:function(r,n,e){e(77971),e(53242);var t=e(54058);r.exports=t.Array.from},24034:function(r,n,e){e(92737);var t=e(54058);r.exports=t.Array.isArray},13830:function(r,n,e){e(66274),e(77971);var t=e(22902);r.exports=t},27385:function(r,n,e){r.exports=e(64225)},81522:function(r,n,e){r.exports=e(30382)},32209:function(r,n,e){r.exports=e(40478)},64225:function(r,n,e){var t=e(95299);r.exports=t},30382:function(r,n,e){var t=e(83450);r.exports=t},40478:function(r,n,e){var t=e(66820);r.exports=t},11354:function(r,n,e){"use strict";var t=e(86843),o=e(78834),a=e(89678),i=e(75196),l=e(6782),s=e(24284),c=e(10623),p=e(55449),u=e(53476),d=e(22902),m=Array;r.exports=function(r){var n=a(r),e=s(this),f=arguments.length,h=f>1?arguments[1]:void 0,w=void 0!==h;w&&(h=t(h,f>2?arguments[2]:void 0));var v,y,g,k,x,b,U=d(n),_=0;if(!U||this===m&&l(U))for(v=c(n),y=e?new this(v):m(v);v>_;_++)b=w?h(n[_],_):n[_],p(y,_,b);else for(x=(k=u(n,U)).next,y=e?new this:[];!(g=o(x,k)).done;_++)b=w?i(k,h,[g.value,_],!0):g.value,p(y,_,b);return y.length=_,y}},75196:function(r,n,e){var t=e(96059),o=e(7609);r.exports=function(r,n,e,a){try{return a?n(t(e)[0],e[1]):n(e)}catch(n){o(r,"throw",n)}}},53242:function(r,n,e){var t=e(76887),o=e(11354);t({target:"Array",stat:!0,forced:!e(21385)((function(r){Array.from(r)}))},{from:o})},92737:function(r,n,e){e(76887)({target:"Array",stat:!0},{isArray:e(1052)})},27698:function(r,n,e){var t=e(54493);r.exports=t},83363:function(r,n,e){var t=e(24034);r.exports=t},56243:function(r,n,e){var t=e(13830);e(7634),r.exports=t},34120:function(r,n,e){"use strict";e.r(n),e.d(n,{default:function(){return A}});e(78363);e(51446),e(19996),e(53592);e(95238);var t=e(66252),o=e(3577),a=(e(25108),(0,t._)("h4",null,"后端传文档流 下载xlsx",-1)),i=[(0,t.Uk)(""),(0,t._)("code",null,"\r\n    async function download(){\r\n        const res =  await  Axios.method(URL,paramsData,{responseType:'blob'})\r\n        const blob = new Blob([res.data], { \r\n            type: 'application/vnd.ms-excel', \r\n        });\r\n        const fileName = 'fileName.xlsx';                           //为文件起名\r\n        const a = document.createElement('a');                      //模拟a标签下载\r\n        a.download = fileName;\r\n        a.style.display = 'none';\r\n        a.href = window.URL.createObjectURL(blob);                  //内存中创建连接地址\r\n        a.setAttribute('download', fileName)\r\n        document.body.appendChild(a);\r\n        a.click();\r\n        URL.revokeObjectURL(a.href);                                 // 释放URL 对象\r\n        document.body.removeChild(a);  \r\n    }\r\n\r\n    //连接下载\r\n    window.open('downloadFile');                                  \r\n    location.href = 'downloadFile';             \r\n",-1),(0,t.Uk)("\r\n")],l=(0,t._)("h4",null,"按需加载 import是异步的",-1),s=[(0,t.Uk)(""),(0,t._)("code",null,"\r\n    async function todo(){\r\n        const package =  await import('packageUrl')\r\n        todo!\r\n    }\r\n",-1),(0,t.Uk)("\r\n")],c=(0,t._)("h4",null,"vue 插槽和默认内容互斥 $slots访问插槽name判断插槽是否使用",-1),p=(0,t.Uk)(""),u=(0,t.Uk)("\r\n"),d=(0,t._)("h4",null,"页面跳转携带token",-1),m=(0,t._)("ul",null,[(0,t._)("li",null,"直接调用接口后端重定向到新页面"),(0,t._)("li",null,"window.open(url, name)， 新页面使用window.name 获取参数的值进行判断")],-1),f=(0,t._)("h4",null,"后端返回 Html",-1),h=(0,t.Uk)(""),w=(0,t.Uk)("\r\n"),v=(0,t._)("h4",null,"vue props 父组件变化 子组件 不能立即响应",-1),y=[(0,t.Uk)(""),(0,t._)("code",null,"\r\n    //1，子组件使用v-if  \r\n    //组件初始化顺序beforeCreate  ->inject -> Props ->  Methods ->  Data -> Computed -> Watch ->provide-> created\r\n    //初始化 props 保证props 是最新的父组件传过来的值\r\n    "+(0,o.zw)('<chrild  v-if="show"></chrild>')+"\r\n    //2，使用watch监听Props 变化,等待props真正变化的时候进行操作\r\n    watch:{\r\n        props(){\r\n            todo!\r\n        }\r\n    }\r\n    //3，nexttick 等待渲染之再进行操作\r\n",-1),(0,t.Uk)("\r\n")],g=(0,t._)("h4",null,"前端 通过formdata上传文件",-1),k=[(0,t.Uk)(""),(0,t._)("code",null,'\r\n    //封装请求formdata\r\n    const upload  =  axios.post(url, params, {\r\n        headers: {\r\n           \'content-type\': \'multipart/form-data;\',\r\n        },\r\n    })\r\n    //从input 事件对象中获取文件参数并添加到formdata对象中 \r\n    const  upload = (event) =>{\r\n        let file =event.srcElement.files[0] //获取文件\r\n        let formData = new FormData(); //创建FormData对象\r\n        formData.append("file", file); //添加参数\r\n        upload(url,formData) //调用接口上传文件\r\n    }\r\n    //fetch请求\r\n    fetch("http://127.0.0.1:5500",{\r\n        method:"POST",\r\n        body:formData\r\n    })\r\n',-1),(0,t.Uk)("\r\n")],x=(0,t._)("h4",null,"压缩文件",-1),b=[(0,t.Uk)(""),(0,t._)("code",null,"\r\n    zlib 压缩\r\n    import zlib from 'zlib';\r\n    npm install node-polyfill-webpack-plugin\r\n    webpack5 package.json 添加\r\n    const NodePolyfillPlugin = require('node-polyfill-webpack-plugin')\r\n    plugins=[\r\n        ...\r\n        new NodePolyfillPlugin()\r\n    ]\r\n    //流\r\n    var gzip = zlib.createGzip();\r\n    var fs = require('fs');\r\n    var inp = fs.createReadStream('input.txt');\r\n    var out = fs.createWriteStream('input.txt.gz');\r\n    inp.pipe(gzip).pipe(out);\r\n\r\n    使用compressing包压缩\r\n    npm install compressing\r\n    npm install fs-extra //文件操作拓展包\r\n    import  compressing  from 'compressing';\r\n    import fsExtra from 'fs-extra';\r\n\r\n    promise 操作\r\n    // 压缩文件夹 \r\n    // zipFileNameEncoding解压编码格式，可以防止中文乱码\r\n    compressing.zip.compressDir('D:\\project' //压缩文件夹路径, 'D:\\project.zip' //输出压缩文件路径, { zipFileNameEncoding: 'gbk' })\r\n        .then(() => {\r\n            console.log('success');\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n        });\r\n    // 压缩文件\r\n    compressing.zip.compressFile('D:\\project\\demo.js' //压缩文件路径, 'D:\\project\\demo.zip' //输出压缩文件路径, { zipFileNameEncoding: 'gbk' })\r\n        .then(() => {\r\n            console.log('success');\r\n        })\r\n        .catch(err => {\r\n            console.error(err);\r\n        });\r\n",-1),(0,t.Uk)("\r\n")],U=(0,t._)("h4",null,"扁平数据结构转树和树型数据扁平化",-1),_=[(0,t.Uk)(""),(0,t._)("code",null,"\r\n    //扁平数据结构转树\r\n    //递归\r\n    let res = []\r\n    const arrayToTree = (array,id,res)=>{\r\n        array.forEach(item=>{\r\n            if (item.pid == id) { //寻找子元素并添加\r\n                let id = item.id\r\n                item.chrildren=[]\r\n                res.push(item)\r\n                arrayToTree(array,id,item.chrildren) //找当前元素的子元素并添加\r\n            }\r\n        })\r\n    }\r\n    //优化 递归的性能太差\r\n    const arrayToTree = (array,id)=>{\r\n        let data={}\r\n        let res = []\r\n        //两边遍历数据不会丢失\r\n        array.forEach(item=>{ \r\n            data[item.id]=item\r\n        })\r\n        array.forEach(item=>{\r\n            if (data[item.pid]) { //有父节点的情况\r\n                if (data[item.pid].chrildren) { //有子节点\r\n                    data[item.pid].chrildren.push(item)\r\n                }else{ //没有子节点\r\n                    data[item.pid].chrildren=[item] \r\n                }\r\n            }else{ //没有父节点 或者 与根节点相同\r\n                res.push(item)\r\n            }\r\n        })\r\n        return res\r\n    }\r\n    //树型数据扁平化\r\n    //递归\r\n    const treeToArray = (array)=>{\r\n        let res = []\r\n        array.forEach(item=>{\r\n            if (item.children && item.children.length!=0) { //有子节点\r\n                res.push(item,) //添加当前节点\r\n                let temp =  treeToArray(item.children)\r\n                item.children=[] //当前节点children置空 不需要保存\r\n                res.push(...temp)// 当前节点数据扁平化\r\n            }else{ //没有直接添加\r\n                res.push(item)\r\n            }\r\n        })\r\n        return res\r\n    }\r\n    //ES6 方法默认扯平一层数据,参数表示处理深度,之能处理数组嵌套数组\r\n    Array.prototype.falt(Infinity)\r\n    //利用栈\r\n    const treeToArray = (array)=>{\r\n        let res =[]\r\n        let stack=[]\r\n        stack.push(...array) //初始元素压入栈\r\n        while (stack.length) { //不为空一直循环\r\n            const item = stack[0]\r\n            res.push(item)\r\n            stack.shift()//弹出\r\n            if (item.children && item.children.length ) {\r\n                stack.push(...item.children)//将子元素压入栈中\r\n                item.children=[] //置空看着干净\r\n            }\r\n        }\r\n    }\r\n",-1),(0,t.Uk)("\r\n")],D=(0,t._)("h4",null,"复制",-1),z=[(0,t.Uk)(""),(0,t._)("code",null,'\r\n    function  copy(value){\r\n        let oInput = document.createElement("input");\r\n        oInput.value = value;\r\n        document.body.appendChild(oInput);\r\n        oInput.select(); // 选择对象;\r\n        // console.log(oInput.value);\r\n        document.execCommand("Copy"); // 执行浏览器复制命令\r\n        this.$message({\r\n            message: "复制成功",\r\n            type: "success",\r\n        });\r\n        oInput.remove();\r\n    }\r\n    \r\n    Clipboard.writeText() \r\n    //需要考虑兼容性\r\n    async function copy(value){\r\n        await navigator.clipboard.writeText(value)\r\n    }\r\n',-1),(0,t.Uk)("\r\n")];var A=(0,t.aZ)({__name:"FAQI",setup:function(r){return function(r,n){var e=(0,t.Q2)("code");return(0,t.wg)(),(0,t.iD)("section",null,[a,(0,t.wy)(((0,t.wg)(),(0,t.iD)("pre",null,i)),[[e]]),l,(0,t.wy)(((0,t.wg)(),(0,t.iD)("pre",null,s)),[[e]]),c,(0,t.wy)(((0,t.wg)(),(0,t.iD)("pre",null,[p,(0,t._)("code",null,"\r\n   "+(0,o.zw)(' <div  class="default" v-if="!$slots.default"></div>\n    <slot name="default"></slot>')+"\r\n",1),u])),[[e]]),d,m,f,(0,t.wy)(((0,t.wg)(),(0,t.iD)("pre",null,[h,(0,t._)("code",null,'\r\n    //打开新页面 渲染返回数据\r\n    var newPage = window.open("about:blank", "_blank");\r\n    newPage.document.write(response.data);\r\n    //文本中保存到流中，生成url，a 标签模拟点击 请求\r\n    var downloadUrl = window.URL.createObjectURL(data);\r\n    var a = document.createElement("a");\r\n    a.href = downloadUrl;\r\n    a.click()\r\n    //使用inner-html属性 v-html\r\n    '+(0,o.zw)('<div v-html="response.data"></div>')+"\r\n    //后端返回新页面，前端访问\r\n    window.location.href=path\r\n    //后端sendRedirect \r\n",1),w])),[[e]]),v,(0,t.wy)(((0,t.wg)(),(0,t.iD)("pre",null,y)),[[e]]),g,(0,t.wy)(((0,t.wg)(),(0,t.iD)("pre",null,k)),[[e]]),x,(0,t.wy)(((0,t.wg)(),(0,t.iD)("pre",null,b)),[[e]]),U,(0,t.wy)(((0,t.wg)(),(0,t.iD)("pre",null,_)),[[e]]),D,(0,t.wy)(((0,t.wg)(),(0,t.iD)("pre",null,z)),[[e]])])}}})}}]);