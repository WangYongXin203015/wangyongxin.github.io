"use strict";(self.webpackChunkvue=self.webpackChunkvue||[]).push([[4884],{4884:function(n,r,e){e.r(r),e.d(r,{default:function(){return g}});var s=e(6252),l=e(3577),i=(0,s._)("h4",null,"初始化项目",-1),t=(0,s.Uk)(""),o=(0,s.Uk)("\r\n"),c=(0,s._)("h4",null,"添加基础loader和plugin",-1),a=(0,s.Uk)(""),p=(0,s.Uk)("\r\n"),d=(0,s._)("h4",null,"Webpack 添加其他loader和plugin",-1),u=[(0,s.Uk)(""),(0,s._)("code",null,'\r\n    //分包webpack-merge\r\n    //将不同环境的webpack配置分开\r\n    npm install webpack-merge --save-dev\r\n    创建dev.config.js，prod.config.js\r\n\r\n    dev.config.js 添加  dev侧重开发效率\r\n    const merge = require("webpack-merge");\r\n    const baseConfig = require(\'./webpack.config.js\')\r\n    module.exports = merge(baseConfig, {\r\n        mode:"development",\r\n    })\r\n\r\n    prod.config.js添加 prod侧重打包优化\r\n    const merge = require("webpack-merge");\r\n    const baseConfig = require(\'./webpack.config.js\')\r\n    module.exports = merge(baseConfig, {\r\n        mode:"production",\r\n    })\r\n\r\n    package.json script 节点修改启动命令\r\n    "dev": "webpack-dev-server --config dev.config.js",\r\n    "build": "webpack --config prod.config.js"\r\n\r\n    //控制台友好提示  FriendlyErrorsWebpackPlugin\r\n    npm install friendly-errors-webpack-plugin --save-dev\r\n    dev.config.js，prod.config.js 添加\r\n\r\n    const FriendlyErrorsWebpackPlugin=require("friendly-errors-webpack-plugin")\r\n    module.exports = {\r\n        ...\r\n        stats:"none", //不显示打包状态\r\n        plugins=[\r\n            ...\r\n            new FriendlyErrorsWebpackPlugin({\r\n                // 成功的时候输出 支持emoji 表情\r\n                //dev\r\n                compilationSuccessInfo: { \r\n                    messages: [`Application is running here: http://localhost:4000`]\r\n                },\r\n                //prod\r\n                compilationSuccessInfo: { \r\n                    messages: [`🚀 bulid success `]\r\n                },\r\n                // 是否每次都清空控制台\r\n                clearConsole: true,\r\n            })\r\n        ]\r\n    }\r\n\r\n    添加  CleanWebpackPlugin 打包清空dist\r\n    npm install --save-dev clean-webpack-plugin\r\n    prod.config.js 添加\r\n    const { CleanWebpackPlugin } = require(\'clean-webpack-plugin\');\r\n    module.exports = {\r\n        ...\r\n        plugins=[\r\n            ...\r\n            new CleanWebpackPlugin() 每次打包清空dist\r\n        ]\r\n    }\r\n    //资源打包位置\r\n    //js资源 将js资源打包到dist/static/js\r\n    module.exports={\r\n        ...\r\n        output: {\r\n            path:path.resolve(__dirname,"dist"),\r\n            filename:"static/js/[name].[chunkhash:8].js",\r\n            chunkFilename: \'static/js/[name].[chunkhash:8].chunk.js\',\r\n        },\r\n    }\r\n    css资源 将css资源打包到dist/static/css\r\n    npm install --save-dev mini-css-extract-plugin \r\n    //提取css\r\n    const MiniCssExtractPlugin = require(\'mini-css-extract-plugin\');\r\n    module.exports={\r\n        ...\r\n        rules: [ //MiniCssExtractPlugin插件不能和style-loader共用\r\n            ...\r\n            {test: /\\.css$/,use:[MiniCssExtractPlugin.loader, \'css-loader\',"postcss-loader",\'less-loader\'],exclude: /node_modules/,},\r\n        ]\r\n        plugins:[\r\n            ...\r\n            new MiniCssExtractPlugin({\r\n                filename: \'static/css/[name].css\',\r\n                chunkFilename: "static/css/[name].css"\r\n            }),\r\n        ]\r\n    }\r\n',-1),(0,s.Uk)("\r\n")];const m={};var g=(0,e(3744).Z)(m,[["render",function(n,r){var e=(0,s.Q2)("code");return(0,s.wg)(),(0,s.iD)("section",null,[i,(0,s.wy)(((0,s.wg)(),(0,s.iD)("pre",null,[t,(0,s._)("code",null,'\r\n    初始化项目\r\n    npm init -y \r\n    //安装webpack webpack-cli\r\n    npm install webpack webpack-cli --save-dev\r\n    //新建webpack.config.js 添加\r\n\r\n    const path = require("path");\r\n    module.exports = {\r\n        entry: "./src/index.js", //需要打包文件的入口路径\r\n        output: {\r\n            filename: "bundle.js", //打包后文件的名称\r\n            path: path.resolve(__dirname, "./dist"), //打包后文件的输出路径\r\n        },\r\n        mode: "development",\r\n    };\r\n    //新建src文件 新建index.js 添加\r\n    console.log("hello world");\r\n    //根目录新建index.html 添加\r\n    '+(0,l.zw)('<script src="./dist/bundle.js"><\/script>')+'\r\n    package.json  scripts节点添加\r\n    "build":"webpack"\r\n\r\n    运行npm run build \r\n    打开html 控制台显示hello world \r\n    打包成功\r\n',1),o])),[[e]]),c,(0,s.wy)(((0,s.wg)(),(0,s.iD)("pre",null,[a,(0,s._)("code",null,'\r\n    //安装 html-webpack-plugin\r\n    npm install html-webpack-plugin -D\r\n    //webpack.config.js 添加\r\n    const HtmlWebpackPlugin =require("html-webpack-plugin")\r\n    module.export={\r\n        ...\r\n        plugins:[\r\n            new HtmlWebpackPlugin({\r\n                template:"./public/index.html", //模板html\r\n                title: \'demo\', //标题\r\n                inject: true,\r\n                favicon: "./public/favicon.ico" //favicon图标\r\n            }),\r\n        ]\r\n    }\r\n\r\n    //新建public文件 将index.html移入 \r\n    //index.html 添加 显示标题\r\n    '+(0,l.zw)("<title><%= htmlWebpackPlugin.options.title %></title>")+' \r\n    //运行npm run build 控制台显示hello world\r\n\r\n    //安装css,less loader\r\n    npm install css-loader style-loader -D\r\n    npm install less less-loader -D\r\n    //webpack.config.js 添加\r\n    module.export={\r\n        ... \r\n        module: {\r\n            rules: [ \r\n                //loader的加载顺序是从右到左的 \r\n                //css-loader是帮助webpack编译css文件\r\n                //style-loader是将最终编译的结果放到HTML中生效\r\n                {   test: /\\.css$/, use: ["style-loader", "css-loader"  ] },\r\n                {   test: /\\.less$/, use: ["style-loader" ,"css-loader" ,"less-loader"  ]}\r\n            ]\r\n        },\r\n    }\r\n    //src 下新建base.css,mixin.less\r\n    //base.css 添加\r\n    div{\r\n        width: 100;\r\n        height: 100;\r\n        background-color: red;\r\n    }\r\n    //mixin.less添加\r\n    div{\r\n        text-align: center;\r\n    }\r\n\r\n    //index.html 添加\r\n    '+(0,l.zw)('<div id="App">hello world</div>')+'\r\n\r\n    //index.js 添加\r\n    import "./style/base.css"\r\n    import \'./style/mixin.less\'\r\n\r\n    //运行npm run build 浏览器查看效果\r\n    \r\n    //安装ts-loader\r\n    //如果考虑兼容性 直接安装babel-loader babel 7.00以上支持ts\r\n    初始化tsconfig\r\n    npm install ts-loader typescript -D\r\n    tsc --init\r\n    生成tsconfig.json文件配置 ts编译配置\r\n    将index,js 改为index.ts\r\n    //webpack.config.js 添加\r\n    module.export={\r\n        ...\r\n        entry: "./src/index.ts",//更改入口文件\r\n        module:{\r\n            rules: [ \r\n                {   test:/\\.ts$/,use:["ts-loader"]},\r\n                ...\r\n            ]\r\n        }\r\n    }\r\n    //运行npm run build 查看效果\r\n\r\n    //配置dev-server 便于开发\r\n    npm install webpack-dev-server -D\r\n    //webpack.config.js 添加\r\n      module.export={\r\n        ...\r\n        devServer: {\r\n            hot: true, //启用模块热替换\r\n            host: "localhost", //设置host\r\n            port: 4000, //设置端口号\r\n            open: true, //自动打开浏览器\r\n            compress: true, //将静态资源进行gzip压缩\r\n        },\r\n    }\r\n    //package.json 文件 scripts节点添加 开发启动命令\r\n    "dev": "webpack-dev-server",\r\n    //引入路径起别名\r\n    webpack.config.js 添加\r\n    module.exports={\r\n        ...\r\n        resolve:{\r\n            extensions: [\'.ts\', \'.tsx\', \'.js\', \'.jsx\',\'.vue\'], //不需要写后缀\r\n            alias:{\r\n                \'@\': path.resolve(__dirname, \'src\')\r\n            }\r\n        }\r\n    }\r\n    tsconfig.json 添加\r\n    "compilerOptions": {\r\n        "baseUrl": ".",\r\n        "paths": {\r\n            "@/*": [ "src/*" ],\r\n        },                                 \r\n    }\r\n    运行npm run dev\r\n    至此 我们已将可以进行简单开发了\r\n',1),p])),[[e]]),d,(0,s.wy)(((0,s.wg)(),(0,s.iD)("pre",null,u)),[[e]])])}]])}}]);